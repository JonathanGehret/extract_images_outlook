@echo off
REM Debug version of Windows build script with detailed logging

setlocal enabledelayedexpansion

echo =======================================================
echo üêõ Kamerafallen Tools - DEBUG BUILD SCRIPT
echo =======================================================
echo.

REM Change to script directory and show current directory
cd /d "%~dp0"
echo üìÅ Current directory: %CD%
echo.

REM List important files
echo üìã Checking for required files...
if exist "main_gui.py" (echo ‚úÖ main_gui.py found) else (echo ‚ùå main_gui.py MISSING)
if exist "github_models_analyzer.py" (echo ‚úÖ github_models_analyzer.py found) else (echo ‚ùå github_models_analyzer.py MISSING)  
if exist "github_models_io.py" (echo ‚úÖ github_models_io.py found) else (echo ‚ùå github_models_io.py MISSING)
if exist "github_models_api.py" (echo ‚úÖ github_models_api.py found) else (echo ‚ùå github_models_api.py MISSING)
if exist "KamerafallenTools.spec" (echo ‚úÖ KamerafallenTools.spec found) else (echo ‚ùå KamerafallenTools.spec MISSING)
if exist "requirements.txt" (echo ‚úÖ requirements.txt found) else (echo ‚ùå requirements.txt MISSING)
echo.

REM Test Python
echo üêç Testing Python...
python --version
if errorlevel 1 (
    echo ‚ùå Python not found in PATH
    pause
    exit /b 1
)

REM Test pip
echo üêç Testing pip...
python -m pip --version
if errorlevel 1 (
    echo ‚ùå pip not working
    pause
    exit /b 1
)

REM Check if critical modules are already installed
echo üîç Checking installed packages...
python -c "import sys; print('Python executable:', sys.executable)"
python -c "import tkinter; print('‚úÖ tkinter works')" 2>nul || echo "‚ùå tkinter not available"
python -c "import PIL; print('‚úÖ PIL works')" 2>nul || echo "‚ùå PIL not available"  
python -c "import pandas; print('‚úÖ pandas works')" 2>nul || echo "‚ùå pandas not available"
python -c "import pyinstaller; print('‚úÖ PyInstaller available')" 2>nul || echo "‚ùå PyInstaller not available"
echo.

REM Install requirements with verbose output
echo üì¶ Installing requirements (verbose)...
python -m pip install -r requirements.txt --verbose
echo.
python -m pip install pyinstaller --verbose
echo.

REM Clean build directories
echo üßπ Cleaning build directories...
if exist build (
    rmdir /s /q build
    echo ‚úÖ Removed build directory
) else (
    echo ‚ÑπÔ∏è  build directory didn't exist
)

if exist dist (
    rmdir /s /q dist  
    echo ‚úÖ Removed dist directory
) else (
    echo ‚ÑπÔ∏è  dist directory didn't exist
)
echo.

REM Show spec file contents (first 20 lines)
echo üìÑ KamerafallenTools.spec contents (first 20 lines):
echo ----------------------------------------
type "KamerafallenTools.spec" | more +0 /C:20
echo ----------------------------------------
echo.

REM Try to build with maximum verbosity
echo üîß Starting PyInstaller build (verbose mode)...
echo This will show detailed output...
echo.
python -m PyInstaller --log-level DEBUG KamerafallenTools.spec

REM Check results
echo.
echo üîç Build results:
if exist "dist" (
    echo ‚úÖ dist directory created
    echo Contents:
    dir "dist" /b
    echo.
    
    if exist "dist\KamerafallenTools.exe" (
        echo ‚úÖ KamerafallenTools.exe created!
        for %%A in ("dist\KamerafallenTools.exe") do (
            set /a size_mb=%%~zA/1024/1024
            echo üìä Size: !size_mb! MB (%%~zA bytes)
        )
    ) else (
        echo ‚ùå KamerafallenTools.exe NOT created
        echo Contents of dist:
        dir "dist"
    )
) else (
    echo ‚ùå dist directory not created
)

echo.
echo üîç Checking for error files:
if exist "build\KamerafallenTools\warn-KamerafallenTools.txt" (
    echo ‚ö†Ô∏è  Warning file exists:
    type "build\KamerafallenTools\warn-KamerafallenTools.txt"
    echo.
)

echo.
echo =======================================================
echo üêõ DEBUG BUILD COMPLETE
echo =======================================================
echo.
echo If the build failed, check the detailed output above.
echo Look for error messages starting with "ERROR:" or "CRITICAL:"
echo.
pause
